from typing import Callable, Dict, Optional, List, Union
import numpy as np
import pandas as pd
import polars as pl


class InferRequest:
    @property
    def model_name(self) -> str: ...
    @property
    def model_version(self) -> str: ...
    @property
    def id(self) -> str: ...
    @property
    def parameters(self) -> Dict[str, Parameter]: ...
    @property
    def inputs(self) -> List[InferInput]: ...
    @property
    def outputs(self) -> List[InferOutput]: ...
    @property
    def raw_input_contents(self) -> bytes: ...
    def __new__(id: str, parameters: Dict[str, Parameter], inputs: List[InferInput]) -> InferRequest: ...
    def as_pandas() -> pd.DataFrame: ...
    def as_dataframe() -> pl.DataFrame: ...

class Parameter:
    @property
    def str_param(self) -> Optional[str]: ...
    @property
    def int_param(self) -> Optional[int]: ...
    @property
    def float_param(self) -> Optional[float]: ...
    @property
    def bool_param(self) -> Optional[bool]: ...
    def __new__(str_param: Optional[str], int_param: Optional[int], float_param: Optional[float], bool_param: Optional[bool]) -> Parameter: ...


class InferInput:
    @property
    def name(self) -> str: ...
    @property
    def datatype(self) -> str: ...
    @property
    def shape(self) -> List[int]: ...
    @property
    def parameters(self) -> Dict[str, Parameter]: ...
    @property
    def data(self) -> List[Union[float, int, bool]]: ...
    @property
    def raw() -> bytes: ...
    def __new__(name: str, datatype: str, shape: List[int], parameters: Dict[str, Parameter], data: List[Union[float, int, bool]]) -> InferInput: ... 
    def as_numpy(self) -> np.ndarray: ...


class InferResponse:
    @property
    def id(self) -> str: ...
    @property
    def model_name(self) -> str: ...
    @property
    def parameters(self) -> Dict[str, Parameter]: ...
    @property
    def outputs(self) -> List[InferOutput]: ...


class InferOutput:
    @property
    def name(self) -> str: ...
    @property
    def datatype(self) -> str: ...
    @property
    def shape(self) -> List[int]: ...
    @property
    def parameters(self) -> Dict[str, Parameter]: ...
    @property
    def data(self) -> List[Union[float, int, bool]]: ...
    @property
    def raw() -> bytes: ...
    def __new__(name: str, datatype: str, shape: List[int], parameters: Dict[str, Parameter], data: List[Union[float, int, bool]]) -> InferInput: ... 
    def as_numpy(self) -> np.ndarray: ...


def preprocessor(preprocessor_fn: Callable[[InferRequest], InferRequest]) -> Callable[[InferRequest], InferRequest]: ...
def postprocessor(postprocessor_fn: Callable[[InferResponse], InferResponse]) -> Callable[[InferResponse], InferResponse]: ...